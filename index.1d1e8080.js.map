{"mappings":"C,A,WWAA,SAAS,EAAqB,CAAG,CAAE,CAAG,EAC9B,CAAA,AAAO,MAAP,GAAe,EAAM,EAAI,MAAM,AAAN,GAAQ,CAAA,EAAM,EAAI,MAAM,AAAN,EAE/C,IAAK,IAAI,EAAI,EAAG,EAAO,AAAI,MAAM,GAAM,EAAI,EAAK,IAAK,CAAI,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAErE,OAAO,CACX,CTCA,IGP+B,EAAK,EHO9B,EAAN,eEIoC,EFJ9B,SAAA,IAuBQ,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAvBR,EAuB4B,aAAa,EAvBzC,ACPN,SAA2B,CAAQ,CAAE,CAAW,EAC5C,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,EDKM,IAAA,CAAA,GAwBF,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAC,CAApC,EAA4C,OAAA,EAAI,KAAK,E,GACrD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,M,CA3BZ,OEI8B,EFJ9B,C,CAmCJ,IAAA,QAAA,MAAA,WACsB,SAAhB,IAAI,CAAC,MAAM,GACb,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,GAEtB,C,E,CAKA,IAAA,UAAA,MAAA,WACE,IAAI,CAAC,YAAY,CAAG,EAAK,aAAa,CACtC,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAC,CAApC,EAA4C,OAAA,EAAI,KAAK,E,GACrD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,C,E,CAOA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAKA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAYA,IAAA,YAAA,MAAA,WACE,OAAO,IAAI,CAAC,MAAM,AACpB,C,E,CAOA,IAAA,gBAAA,MAAA,WACE,IAAM,EAAa,EAAE,CAUrB,GARA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAC,CAAA,CAAK,CAAzB,EACE,EAAI,OAAO,CAAC,SAAC,CAAA,CAAM,CAAnB,EACe,IAAT,GACF,EAAW,IAAI,CAAC,CAAC,EAAU,EAAS,CAExC,EACF,GAEI,EAAW,MAAM,CAAG,EAAG,CACzB,IItGoB,EJuGlB,EItGG,ACNX,SAA2B,CAAG,EAC1B,GAAI,MAAM,OAAO,CAAC,GAAM,OAAO,CACnC,EDG0B,EJuGlB,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,GItG5B,AENrC,SAAkC,CAAG,CAAE,CAAC,EACpC,IAOI,EAAI,EAPJ,EAAK,AAAO,MAAP,EAAc,KAAO,AAAkB,aAAlB,OAAO,QAA0B,CAAG,CAAC,OAAO,QAAQ,CAAC,EAAI,CAAG,CAAC,aAAa,CAExG,GAAI,AAAM,MAAN,GAEJ,IAAI,EAAO,EAAE,CACT,EAAK,CAAA,EACL,EAAK,CAAA,EAGT,GAAI,CACA,IAAK,EAAK,EAAG,IAAI,CAAC,GAAM,CAAE,CAAA,EAAM,AAAA,CAAA,EAAK,EAAG,IAAI,EAAA,EAAI,IAAI,AAAJ,IAC5C,EAAK,IAAI,CAAC,EAAG,KAAK,EACT,AN+F4C,IM/F5C,EAAK,MAAM,EAF+B,EAAK,CAAA,GAIhE,CAAE,MAAO,EAAK,CACV,EAAK,CAAA,EACL,EAAK,CACT,QAAU,CACN,GAAI,CACK,GAAM,AAAgB,MAAhB,EAAG,MAAS,EAAU,EAAG,MAAS,EACjD,QAAU,CACN,GAAI,EAAI,MAAM,CAClB,CACJ,CAEA,OAAO,EACX,EFrB8D,EJsGG,IItGQ,AIJzE,SAAwC,CAAC,CAAE,CAAM,EAC7C,GAAK,GACL,GAAI,AAAa,UAAb,OAAO,EAAgB,OAAO,AAAA,EAAqB,ERwGM,GQtG7D,IAAI,EAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,EAAG,IAGnD,GADU,WAAN,GAAkB,EAAE,WAAW,EAAE,CAAA,EAAI,EAAE,WAAW,CAAC,IAAI,AAAJ,EACnD,AAAM,QAAN,GAAe,AAAM,QAAN,EAAa,OAAO,MAAM,IAAI,CAAC,GAClD,GAAI,AAAM,cAAN,GAAqB,2CAA2C,IAAI,CAAC,GAAI,OAAO,AAAA,EAAqB,ERkG5C,GQjGjE,EJLwG,EJsGvC,IItGkD,AGNnH,WACI,MAAM,AAAI,UAAU,4IACxB,IPyGa,EACL,CAAA,CAAA,EAAA,CADgB,EAChB,CADF,CAAA,EAAA,AAGA,CAAA,IAAI,CAAC,KAAK,CAAC,EAAU,CAAC,EAAU,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAC/D,CACF,C,E,CAQA,IAAA,cAAA,MAAA,SAAY,CAAI,CAAE,CAAI,EACpB,OACE,EAAK,MAAM,GAAK,EAAK,MAAM,EAC3B,EAAK,KAAK,CAAC,SAAC,CAAA,CAAK,CAFnB,EAE6B,OAAA,IAAQ,CAAI,CAAC,EAAM,A,EAElD,C,E,CAMA,IAAA,iBAAA,MAAA,W,I,E,I,CACE,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,SAAC,CAAA,CAAG,CAA7B,EACE,OACA,EAAK,KAAK,CAAC,GAAG,CAAC,SAAC,CAAhB,EAAwB,OAAA,CAAG,CAAC,EAAS,A,E,EACzC,C,E,CAMA,IAAA,WAAA,MAAA,iBACE,EAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAC,CAArB,EAA6B,OAAA,EAAI,QAAQ,CAAC,KAAQ,KAChD,IAAI,CAAC,MAAM,CAAG,MAEP,CAAA,EAIX,C,E,CAMA,IAAA,YAAA,MAAA,WACE,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,GACE,AAAyB,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACnB,EAAM,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EAC5D,EAAM,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,CAE7D,MAAO,CAAA,EAMb,OAFA,IAAI,CAAC,MAAM,CAAG,OAEP,CAAA,CACT,C,E,CAIA,IAAA,WAAA,MAAA,W,I,E,I,CACE,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,MAAO,CAAA,EAKT,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,EAAG,KAA3B,A,S,C,EAIE,IAAK,IAHC,EAAS,EAAK,KAAK,CAAC,EAAI,CAAC,MAAM,CAAC,SAAC,CAAvC,EAA+C,OAAA,AAAQ,IAAR,C,GAGtC,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,EAAK,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,EAAO,MAAM,CAAC,EAAI,EAAG,IAKzB,KAAO,EAAO,MAAM,CAAG,GACrB,EAAO,IAAI,CAAC,GAIT,EAAK,WAAW,CAAC,EAAK,KAAK,CAAC,EAAI,CAAE,KACrC,EAAK,KAAK,CAAC,EAAI,CAAG,EAClB,EAAQ,CAAA,EAEZ,EAtBA,GA8BA,OANI,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,IAGT,CACT,C,E,CAEA,IAAA,YAAA,MAAA,WACE,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,MAAO,CAAA,CAGT,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAC,CAA7B,EAAqC,OAAA,EAAI,KAAK,GAAG,OAAO,E,GAExD,IAAM,EAAQ,IAAI,CAAC,QAAQ,GAI3B,OAFA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAC,CAA7B,EAAqC,OAAA,EAAI,OAAO,E,GAEzC,CACT,C,E,CAEA,IAAA,WAAA,MAAA,WACE,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,MAAO,CAAA,CAGT,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,cAAc,GAEhC,IAAM,EAAQ,IAAI,CAAC,SAAS,GAI5B,OAFA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,cAAc,GAEzB,CACT,C,E,CAEA,IAAA,SAAA,MAAA,WACE,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,MAAO,CAAA,CAGT,CAAA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,cAAc,GAEhC,IAAM,EAAQ,IAAI,CAAC,QAAQ,GAI3B,OAFA,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,cAAc,GAEzB,CACT,C,E,CElPkB,AAZpB,SAA2B,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,EAEsC,AFLhC,EEK4C,SAAS,CAAE,GFLvD,C,IGP8B,EHuBX,CACrB,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CG3BK,CADuB,EHuBtB,mBAhBH,EGLE,OAAO,cAAc,CHKvB,EGL6B,EAAK,CAAE,MAAO,EAAO,WAAY,CAAA,EAAM,aAAc,CAAA,EAAM,SAAU,CAAA,CAAK,GAClG,AHIL,CGJQ,CAAC,EAAI,CAAG,EJCtB,IAAM,EAAO,IC6PI,ED3Pb,EAAc,CAAA,EAKlB,SAAS,IACP,IA0BM,EA1BA,EAAQ,EAAK,QAAQ,GACrB,EAAa,EAAK,SAAS,EAGjC,CAAA,SAAS,aAAa,CAAC,eAAe,WAAW,CAAG,EAGpD,IAAM,EAAmB,SAAS,aAAa,CAAC,sBAEhD,EAAiB,aAAa,CAAC,iBAAiB,SAAS,CAAC,GAAG,CAAC,UAC9D,EAAiB,aAAa,CAAC,gBAAgB,SAAS,CAAC,GAAG,CAAC,UAC7D,EAAiB,aAAa,CAAC,kBAAkB,SAAS,CAAC,GAAG,CAAC,UAE3D,AAAe,QAAf,EACF,EAAiB,aAAa,CAAC,gBAAgB,SAAS,CAAC,MAAM,CAAC,UACvD,AAAe,SAAf,EACT,EAAiB,aAAa,CAAC,iBAAiB,SAAS,CAAC,MAAM,CAAC,UACzC,SAAf,GACT,EAAiB,aAAa,CAAC,kBAAkB,SAAS,CAAC,MAAM,CAAC,UAQ9D,EAAQ,EAAK,QAAQ,GAI3B,AAFc,AADS,SAAS,aAAa,CAAC,eACjB,gBAAgB,CAAC,eAExC,OAAO,CAAC,SAAC,CAAA,CAAM,CAArB,EACE,IAEM,EAAY,CAAK,CAFX,KAAK,KAAK,CAAC,EAAQ,GAEH,CADhB,EAAQ,EACa,CAE3B,EAAe,MAAM,IAAI,CAAC,EAAK,SAAS,EAAE,IAAI,CAAC,SAAU,CAAS,EACtE,OAAO,EAAU,UAAU,CAAC,eAC9B,GAEI,GACF,EAAK,SAAS,CAAC,MAAM,CAAC,GAGN,IAAd,GACF,EAAK,SAAS,CAAC,GAAG,CAAE,eAAwB,MAAA,CAAV,IAGpC,EAAK,WAAW,CAAG,AAAc,IAAd,EAAkB,GAAK,CAC5C,EA1BF,CA8BA,SAAS,gBAAgB,CAAC,UAAW,SAAC,CAAtC,EACE,GAAK,GAIL,OAAQ,EAAE,GAAG,EACX,IAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,KAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,SACE,MACJ,CACA,IACF,GAiCA,SAAS,aAAa,CAAC,oBAAoB,gBAAgB,CAAC,QAAS,SAAC,CAAtE,EACE,IAXM,EAWA,EAAS,EAAE,MAAM,CAEnB,EAAO,SAAS,CAAC,QAAQ,CAAC,SAC5B,AAlCJ,WACE,GAAI,CAAC,EAAa,CAChB,EAAK,KAAK,GACV,EAAc,CAAA,EAEd,IAAM,EAAc,SAAS,aAAa,CAAC,SAE3C,CAAA,EAAY,WAAW,CAAG,UAC1B,EAAY,SAAS,CAAC,MAAM,CAAC,SAC7B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC5B,CAEA,GACF,IAsBa,EAAO,SAAS,CAAC,QAAQ,CAAC,aAlBrC,EAAK,OAAO,GACZ,EAAc,CAAA,EAId,CAFM,EAAgB,SAAS,aAAa,CAAC,aAE/B,WAAW,CAAG,QAC5B,EAAc,SAAS,CAAC,MAAM,CAAC,WAC/B,EAAc,SAAS,CAAC,GAAG,CAAC,SAE5B,IAYF,E","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$71511d61b312f219(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Game.INITIAL_STATE;\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.initialState = initialState;\n        this.board = this.initialState.map(function(row) {\n            return row.slice();\n        });\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            // initialization methods\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status === \"idle\") {\n                    this.status = \"playing\";\n                    this.addRandomTile();\n                    this.addRandomTile();\n                }\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.initialState = Game.INITIAL_STATE;\n                this.board = this.initialState.map(function(row) {\n                    return row.slice();\n                });\n                this.score = 0;\n                this.status = \"idle\";\n            }\n        },\n        {\n            // Getters\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            // Utility methods\n            /**\n   * Adds a random tile (2 or 4) to an empty spot on the board.\n   */ key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                this.board.forEach(function(row, rowIndex) {\n                    row.forEach(function(cell, colIndex) {\n                        if (cell === 0) emptyCells.push([\n                            rowIndex,\n                            colIndex\n                        ]);\n                    });\n                });\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), randomRow = _emptyCells_Math_floor[0], randomCol = _emptyCells_Math_floor[1];\n                    this.board[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            /**\n   * Compares two arrays for equality.\n   * @param {Array} arr1\n   * @param {Array} arr2\n   * @returns {boolean}\n   */ key: \"arraysEqual\",\n            value: function arraysEqual(arr1, arr2) {\n                return arr1.length === arr2.length && arr1.every(function(val, index) {\n                    return val === arr2[index];\n                });\n            }\n        },\n        {\n            /**\n   * Transposes the board (turns rows into columns).\n   * @returns {number[][]}\n   */ key: \"transposeBoard\",\n            value: function transposeBoard() {\n                var _this = this;\n                return this.board[0].map(function(_, colIndex) {\n                    return(// eslint-disable-next-line prettier/prettier\n                    _this.board.map(function(row) {\n                        return row[colIndex];\n                    }));\n                });\n            }\n        },\n        {\n            /**\n   * Checks if the player has won (2048 tile).\n   * @returns {boolean}\n   */ key: \"checkWin\",\n            value: function checkWin() {\n                if (this.board.some(function(row) {\n                    return row.includes(2048);\n                })) {\n                    this.status = \"win\";\n                    return true;\n                }\n                return false;\n            }\n        },\n        {\n            /**\n   * Checks if the player has lost (no valid moves left).\n   * @returns {boolean}\n   */ key: \"checkLose\",\n            value: function checkLose() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.board[row][col] === 0 || col < 3 && this.board[row][col] === this.board[row][col + 1] || row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n                }\n                this.status = \"lose\";\n                return true;\n            }\n        },\n        {\n            // Movement Methods\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var newRow = _this.board[row].filter(function(num) {\n                        return num !== 0;\n                    });\n                    // Merge adjacent equal cells\n                    for(var i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                        newRow[i] *= 2;\n                        _this.score += newRow[i];\n                        newRow.splice(i + 1, 1); // Remove the merged cell\n                    }\n                    // Fill the remaining cells with zeros\n                    while(newRow.length < 4)newRow.push(0);\n                    // Update the board if it has changed\n                    if (!_this.arraysEqual(_this.board[row], newRow)) {\n                        _this.board[row] = newRow;\n                        moved = true;\n                    }\n                };\n                if (this.status !== \"playing\") return false;\n                var moved = false;\n                for(var row = 0; row < 4; row++)_loop(row);\n                if (moved) {\n                    this.addRandomTile();\n                    this.checkWin();\n                    this.checkLose();\n                }\n                return moved;\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status !== \"playing\") return false;\n                this.board = this.board.map(function(row) {\n                    return row.slice().reverse();\n                });\n                var moved = this.moveLeft();\n                this.board = this.board.map(function(row) {\n                    return row.reverse();\n                });\n                return moved;\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status !== \"playing\") return false;\n                this.board = this.transposeBoard();\n                var moved = this.moveRight();\n                this.board = this.transposeBoard();\n                return moved;\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status !== \"playing\") return false;\n                this.board = this.transposeBoard();\n                var moved = this.moveLeft();\n                this.board = this.transposeBoard();\n                return moved;\n            }\n        }\n    ]);\n    return Game;\n}();\n/**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ (0, $cd5a47cf8ef6d766$export$71511d61b312f219)($3d28d7f1aac198f5$var$Game, \"INITIAL_STATE\", [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$gameStarted = false;\n// Write your code here\n// Updating state function\nfunction $197cd56b15c33885$var$updateGameState() {\n    var score = $197cd56b15c33885$var$game.getScore();\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    // score update\n    document.querySelector(\".game-score\").textContent = score;\n    // status update\n    var messageContainer = document.querySelector(\".message-container\");\n    messageContainer.querySelector(\".message-lose\").classList.add(\"hidden\");\n    messageContainer.querySelector(\".message-win\").classList.add(\"hidden\");\n    messageContainer.querySelector(\".message-start\").classList.add(\"hidden\");\n    if (gameStatus === \"win\") messageContainer.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") messageContainer.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    else if (gameStatus === \"idle\") messageContainer.querySelector(\".message-start\").classList.remove(\"hidden\");\n    $197cd56b15c33885$var$displayBoard();\n}\n// display board function\nfunction $197cd56b15c33885$var$displayBoard() {\n    var board = $197cd56b15c33885$var$game.getState();\n    var boardContainer = document.querySelector(\".game-field\");\n    var cells = boardContainer.querySelectorAll(\".field-cell\");\n    cells.forEach(function(cell, index) {\n        var row = Math.floor(index / 4);\n        var col = index % 4;\n        var cellValue = board[row][col];\n        var currentClass = Array.from(cell.classList).find(function(className) {\n            return className.startsWith(\"field-cell--\");\n        });\n        if (currentClass) cell.classList.remove(currentClass);\n        if (cellValue !== 0) cell.classList.add(\"field-cell--\".concat(cellValue));\n        cell.textContent = cellValue === 0 ? \"\" : cellValue;\n    });\n}\n// movement events\ndocument.addEventListener(\"keydown\", function(e) {\n    if (!$197cd56b15c33885$var$gameStarted) return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $197cd56b15c33885$var$updateGameState();\n});\n// Start game\nfunction $197cd56b15c33885$var$startGame() {\n    if (!$197cd56b15c33885$var$gameStarted) {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$gameStarted = true;\n        var startButton = document.querySelector(\".start\");\n        startButton.textContent = \"Restart\";\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n    }\n    $197cd56b15c33885$var$updateGameState();\n}\n// Restart game\nfunction $197cd56b15c33885$var$restartGame() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$gameStarted = false;\n    var restartButton = document.querySelector(\".restart\");\n    restartButton.textContent = \"Start\";\n    restartButton.classList.remove(\"restart\");\n    restartButton.classList.add(\"start\");\n    $197cd56b15c33885$var$updateGameState();\n}\n// Event listener for the button\ndocument.querySelector(\".start, .restart\").addEventListener(\"click\", function(e) {\n    var button = e.target;\n    if (button.classList.contains(\"start\")) $197cd56b15c33885$var$startGame();\n    else if (button.classList.contains(\"restart\")) $197cd56b15c33885$var$restartGame();\n});\n\n})();\n//# sourceMappingURL=index.1d1e8080.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nlet gameStarted = false;\n\n// Write your code here\n\n// Updating state function\nfunction updateGameState() {\n  const score = game.getScore();\n  const gameStatus = game.getStatus();\n\n  // score update\n  document.querySelector('.game-score').textContent = score;\n\n  // status update\n  const messageContainer = document.querySelector('.message-container');\n\n  messageContainer.querySelector('.message-lose').classList.add('hidden');\n  messageContainer.querySelector('.message-win').classList.add('hidden');\n  messageContainer.querySelector('.message-start').classList.add('hidden');\n\n  if (gameStatus === 'win') {\n    messageContainer.querySelector('.message-win').classList.remove('hidden');\n  } else if (gameStatus === 'lose') {\n    messageContainer.querySelector('.message-lose').classList.remove('hidden');\n  } else if (gameStatus === 'idle') {\n    messageContainer.querySelector('.message-start').classList.remove('hidden');\n  }\n\n  displayBoard();\n}\n\n// display board function\nfunction displayBoard() {\n  const board = game.getState();\n  const boardContainer = document.querySelector('.game-field');\n  const cells = boardContainer.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const cellValue = board[row][col];\n\n    const currentClass = Array.from(cell.classList).find(function (className) {\n      return className.startsWith('field-cell--');\n    });\n\n    if (currentClass) {\n      cell.classList.remove(currentClass);\n    }\n\n    if (cellValue !== 0) {\n      cell.classList.add(`field-cell--${cellValue}`);\n    }\n\n    cell.textContent = cellValue === 0 ? '' : cellValue;\n  });\n}\n\n// movement events\ndocument.addEventListener('keydown', (e) => {\n  if (!gameStarted) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n  updateGameState();\n});\n\n// Start game\nfunction startGame() {\n  if (!gameStarted) {\n    game.start();\n    gameStarted = true;\n\n    const startButton = document.querySelector('.start');\n\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n  }\n\n  updateGameState();\n}\n\n// Restart game\nfunction restartGame() {\n  game.restart();\n  gameStarted = false;\n\n  const restartButton = document.querySelector('.restart');\n\n  restartButton.textContent = 'Start';\n  restartButton.classList.remove('restart');\n  restartButton.classList.add('start');\n\n  updateGameState();\n}\n\n// Event listener for the button\ndocument.querySelector('.start, .restart').addEventListener('click', (e) => {\n  const button = e.target;\n\n  if (button.classList.contains('start')) {\n    startGame();\n  } else if (button.classList.contains('restart')) {\n    restartGame();\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  static INITIAL_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  constructor(initialState = Game.INITIAL_STATE) {\n    this.initialState = initialState;\n    this.board = this.initialState.map((row) => row.slice());\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // initialization methods\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.initialState = Game.INITIAL_STATE;\n    this.board = this.initialState.map((row) => row.slice());\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Getters\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  // Utility methods\n\n  /**\n   * Adds a random tile (2 or 4) to an empty spot on the board.\n   */\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push([rowIndex, colIndex]);\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const [randomRow, randomCol] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  /**\n   * Compares two arrays for equality.\n   * @param {Array} arr1\n   * @param {Array} arr2\n   * @returns {boolean}\n   */\n  arraysEqual(arr1, arr2) {\n    return (\n      arr1.length === arr2.length &&\n      arr1.every((val, index) => val === arr2[index])\n    );\n  }\n\n  /**\n   * Transposes the board (turns rows into columns).\n   * @returns {number[][]}\n   */\n  transposeBoard() {\n    return this.board[0].map((_, colIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      this.board.map((row) => row[colIndex]));\n  }\n\n  /**\n   * Checks if the player has won (2048 tile).\n   * @returns {boolean}\n   */\n  checkWin() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks if the player has lost (no valid moves left).\n   * @returns {boolean}\n   */\n  checkLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (\n          this.board[row][col] === 0 ||\n          (col < 3 && this.board[row][col] === this.board[row][col + 1]) ||\n          (row < 3 && this.board[row][col] === this.board[row + 1][col])\n        ) {\n          return false;\n        }\n      }\n    }\n    this.status = 'lose';\n\n    return true;\n  }\n\n  // Movement Methods\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.board[row].filter((num) => num !== 0);\n\n      // Merge adjacent equal cells\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1); // Remove the merged cell\n        }\n      }\n\n      // Fill the remaining cells with zeros\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      // Update the board if it has changed\n      if (!this.arraysEqual(this.board[row], newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkWin();\n      this.checkLose();\n    }\n\n    return moved;\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    this.board = this.board.map((row) => row.slice().reverse());\n\n    const moved = this.moveLeft();\n\n    this.board = this.board.map((row) => row.reverse());\n\n    return moved;\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    this.board = this.transposeBoard();\n\n    const moved = this.moveRight();\n\n    this.board = this.transposeBoard();\n\n    return moved;\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    this.board = this.transposeBoard();\n\n    const moved = this.moveLeft();\n\n    this.board = this.transposeBoard();\n\n    return moved;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","key","value","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","arguments","INITIAL_STATE","instance","Constructor","TypeError","board","map","row","slice","score","status","addRandomTile","emptyCells","forEach","rowIndex","cell","colIndex","push","_emptyCells_Math_floor","isArray","Math","floor","random","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","err","o","minLen","n","Object","prototype","toString","constructor","name","from","test","randomRow","randomCol","arr1","every","val","index","_this","_","some","includes","col","moved","_loop","newRow","filter","num","splice","arraysEqual","checkWin","checkLose","reverse","moveLeft","transposeBoard","moveRight","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","obj","$197cd56b15c33885$var$game","$197cd56b15c33885$var$gameStarted","$197cd56b15c33885$var$updateGameState","getScore","gameStatus","getStatus","document","querySelector","textContent","messageContainer","classList","add","remove","getState","cells","boardContainer","querySelectorAll","cellValue","currentClass","find","className","startsWith","concat","addEventListener","e","moveUp","moveDown","restartButton","button","contains","$197cd56b15c33885$var$startGame","start","startButton","restart"],"version":3,"file":"index.1d1e8080.js.map"}