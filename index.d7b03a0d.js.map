{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static INITIAL_STATE = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    constructor(initialState = $a5fd07fa01589658$var$Game.INITIAL_STATE){\n        this.initialState = initialState;\n        this.board = this.initialState.map((row)=>row.slice());\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    // initialization methods\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.initialState = $a5fd07fa01589658$var$Game.INITIAL_STATE;\n        this.board = this.initialState.map((row)=>row.slice());\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    // Getters\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    // Utility methods\n    /**\n   * Adds a random tile (2 or 4) to an empty spot on the board.\n   */ addRandomTile() {\n        const emptyCells = [];\n        this.board.forEach((row, rowIndex)=>{\n            row.forEach((cell, colIndex)=>{\n                if (cell === 0) emptyCells.push([\n                    rowIndex,\n                    colIndex\n                ]);\n            });\n        });\n        if (emptyCells.length > 0) {\n            const [randomRow, randomCol] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    /**\n   * Compares two arrays for equality.\n   * @param {Array} arr1\n   * @param {Array} arr2\n   * @returns {boolean}\n   */ arraysEqual(arr1, arr2) {\n        return arr1.length === arr2.length && arr1.every((val, index)=>val === arr2[index]);\n    }\n    /**\n   * Transposes the board (turns rows into columns).\n   * @returns {number[][]}\n   */ transposeBoard() {\n        return this.board[0].map((_, colIndex)=>// eslint-disable-next-line prettier/prettier\n            this.board.map((row)=>row[colIndex]));\n    }\n    /**\n   * Checks if the player has won (2048 tile).\n   * @returns {boolean}\n   */ checkWin() {\n        if (this.board.some((row)=>row.includes(2048))) {\n            this.status = \"win\";\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Checks if the player has lost (no valid moves left).\n   * @returns {boolean}\n   */ checkLose() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            if (this.board[row][col] === 0 || col < 3 && this.board[row][col] === this.board[row][col + 1] || row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n        }\n        this.status = \"lose\";\n        return true;\n    }\n    // Movement Methods\n    moveLeft() {\n        if (this.status !== \"playing\") return false;\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.board[row].filter((num)=>num !== 0);\n            // Merge adjacent equal cells\n            for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n                newRow[i] *= 2;\n                this.score += newRow[i];\n                newRow.splice(i + 1, 1); // Remove the merged cell\n            }\n            // Fill the remaining cells with zeros\n            while(newRow.length < 4)newRow.push(0);\n            // Update the board if it has changed\n            if (!this.arraysEqual(this.board[row], newRow)) {\n                this.board[row] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.checkWin();\n            this.checkLose();\n        }\n        return moved;\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return false;\n        this.board = this.board.map((row)=>row.slice().reverse());\n        const moved = this.moveLeft();\n        this.board = this.board.map((row)=>row.reverse());\n        return moved;\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return false;\n        this.board = this.transposeBoard();\n        const moved = this.moveRight();\n        this.board = this.transposeBoard();\n        return moved;\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return false;\n        this.board = this.transposeBoard();\n        const moved = this.moveLeft();\n        this.board = this.transposeBoard();\n        return moved;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nlet $09e991522ca7e64e$var$gameStarted = false;\n// Write your code here\n// Updating state function\nfunction $09e991522ca7e64e$var$updateGameState() {\n    const score = $09e991522ca7e64e$var$game.getScore();\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    // score update\n    document.querySelector(\".game-score\").textContent = score;\n    // status update\n    const messageContainer = document.querySelector(\".message-container\");\n    messageContainer.querySelector(\".message-lose\").classList.add(\"hidden\");\n    messageContainer.querySelector(\".message-win\").classList.add(\"hidden\");\n    messageContainer.querySelector(\".message-start\").classList.add(\"hidden\");\n    if (gameStatus === \"win\") messageContainer.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") messageContainer.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    else if (gameStatus === \"idle\") messageContainer.querySelector(\".message-start\").classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$displayBoard();\n}\n// display board function\nfunction $09e991522ca7e64e$var$displayBoard() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    const boardContainer = document.querySelector(\".game-field\");\n    const cells = boardContainer.querySelectorAll(\".field-cell\");\n    cells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const cellValue = board[row][col];\n        const currentClass = Array.from(cell.classList).find(function(className) {\n            return className.startsWith(\"field-cell--\");\n        });\n        if (currentClass) cell.classList.remove(currentClass);\n        if (cellValue !== 0) cell.classList.add(`field-cell--${cellValue}`);\n        cell.textContent = cellValue === 0 ? \"\" : cellValue;\n    });\n}\n// movement events\ndocument.addEventListener(\"keydown\", (e)=>{\n    if (!$09e991522ca7e64e$var$gameStarted) return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateGameState();\n});\n// Start game\nfunction $09e991522ca7e64e$var$startGame() {\n    if (!$09e991522ca7e64e$var$gameStarted) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$gameStarted = true;\n        const startButton = document.querySelector(\".start\");\n        startButton.textContent = \"Restart\";\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n    }\n    $09e991522ca7e64e$var$updateGameState();\n}\n// Restart game\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$gameStarted = false;\n    const restartButton = document.querySelector(\".restart\");\n    restartButton.textContent = \"Start\";\n    restartButton.classList.remove(\"restart\");\n    restartButton.classList.add(\"start\");\n    $09e991522ca7e64e$var$updateGameState();\n}\n// Event listener for the button\ndocument.querySelector(\".start, .restart\").addEventListener(\"click\", (e)=>{\n    const button = e.target;\n    if (button.classList.contains(\"start\")) $09e991522ca7e64e$var$startGame();\n    else if (button.classList.contains(\"restart\")) $09e991522ca7e64e$var$restartGame();\n});\n\n\n//# sourceMappingURL=index.d7b03a0d.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nlet gameStarted = false;\n\n// Write your code here\n\n// Updating state function\nfunction updateGameState() {\n  const score = game.getScore();\n  const gameStatus = game.getStatus();\n\n  // score update\n  document.querySelector('.game-score').textContent = score;\n\n  // status update\n  const messageContainer = document.querySelector('.message-container');\n\n  messageContainer.querySelector('.message-lose').classList.add('hidden');\n  messageContainer.querySelector('.message-win').classList.add('hidden');\n  messageContainer.querySelector('.message-start').classList.add('hidden');\n\n  if (gameStatus === 'win') {\n    messageContainer.querySelector('.message-win').classList.remove('hidden');\n  } else if (gameStatus === 'lose') {\n    messageContainer.querySelector('.message-lose').classList.remove('hidden');\n  } else if (gameStatus === 'idle') {\n    messageContainer.querySelector('.message-start').classList.remove('hidden');\n  }\n\n  displayBoard();\n}\n\n// display board function\nfunction displayBoard() {\n  const board = game.getState();\n  const boardContainer = document.querySelector('.game-field');\n  const cells = boardContainer.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const cellValue = board[row][col];\n\n    const currentClass = Array.from(cell.classList).find(function (className) {\n      return className.startsWith('field-cell--');\n    });\n\n    if (currentClass) {\n      cell.classList.remove(currentClass);\n    }\n\n    if (cellValue !== 0) {\n      cell.classList.add(`field-cell--${cellValue}`);\n    }\n\n    cell.textContent = cellValue === 0 ? '' : cellValue;\n  });\n}\n\n// movement events\ndocument.addEventListener('keydown', (e) => {\n  if (!gameStarted) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n  updateGameState();\n});\n\n// Start game\nfunction startGame() {\n  if (!gameStarted) {\n    game.start();\n    gameStarted = true;\n\n    const startButton = document.querySelector('.start');\n\n    startButton.textContent = 'Restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n  }\n\n  updateGameState();\n}\n\n// Restart game\nfunction restartGame() {\n  game.restart();\n  gameStarted = false;\n\n  const restartButton = document.querySelector('.restart');\n\n  restartButton.textContent = 'Start';\n  restartButton.classList.remove('restart');\n  restartButton.classList.add('start');\n\n  updateGameState();\n}\n\n// Event listener for the button\ndocument.querySelector('.start, .restart').addEventListener('click', (e) => {\n  const button = e.target;\n\n  if (button.classList.contains('start')) {\n    startGame();\n  } else if (button.classList.contains('restart')) {\n    restartGame();\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  static INITIAL_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  constructor(initialState = Game.INITIAL_STATE) {\n    this.initialState = initialState;\n    this.board = this.initialState.map((row) => row.slice());\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // initialization methods\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.initialState = Game.INITIAL_STATE;\n    this.board = this.initialState.map((row) => row.slice());\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Getters\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  // Utility methods\n\n  /**\n   * Adds a random tile (2 or 4) to an empty spot on the board.\n   */\n  addRandomTile() {\n    const emptyCells = [];\n\n    this.board.forEach((row, rowIndex) => {\n      row.forEach((cell, colIndex) => {\n        if (cell === 0) {\n          emptyCells.push([rowIndex, colIndex]);\n        }\n      });\n    });\n\n    if (emptyCells.length > 0) {\n      const [randomRow, randomCol] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[randomRow][randomCol] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  /**\n   * Compares two arrays for equality.\n   * @param {Array} arr1\n   * @param {Array} arr2\n   * @returns {boolean}\n   */\n  arraysEqual(arr1, arr2) {\n    return (\n      arr1.length === arr2.length &&\n      arr1.every((val, index) => val === arr2[index])\n    );\n  }\n\n  /**\n   * Transposes the board (turns rows into columns).\n   * @returns {number[][]}\n   */\n  transposeBoard() {\n    return this.board[0].map((_, colIndex) =>\n      // eslint-disable-next-line prettier/prettier\n      this.board.map((row) => row[colIndex]));\n  }\n\n  /**\n   * Checks if the player has won (2048 tile).\n   * @returns {boolean}\n   */\n  checkWin() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks if the player has lost (no valid moves left).\n   * @returns {boolean}\n   */\n  checkLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (\n          this.board[row][col] === 0 ||\n          (col < 3 && this.board[row][col] === this.board[row][col + 1]) ||\n          (row < 3 && this.board[row][col] === this.board[row + 1][col])\n        ) {\n          return false;\n        }\n      }\n    }\n    this.status = 'lose';\n\n    return true;\n  }\n\n  // Movement Methods\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.board[row].filter((num) => num !== 0);\n\n      // Merge adjacent equal cells\n      for (let i = 0; i < newRow.length - 1; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          newRow[i] *= 2;\n          this.score += newRow[i];\n          newRow.splice(i + 1, 1); // Remove the merged cell\n        }\n      }\n\n      // Fill the remaining cells with zeros\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      // Update the board if it has changed\n      if (!this.arraysEqual(this.board[row], newRow)) {\n        this.board[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkWin();\n      this.checkLose();\n    }\n\n    return moved;\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    this.board = this.board.map((row) => row.slice().reverse());\n\n    const moved = this.moveLeft();\n\n    this.board = this.board.map((row) => row.reverse());\n\n    return moved;\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    this.board = this.transposeBoard();\n\n    const moved = this.moveRight();\n\n    this.board = this.transposeBoard();\n\n    return moved;\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    this.board = this.transposeBoard();\n\n    const moved = this.moveLeft();\n\n    this.board = this.transposeBoard();\n\n    return moved;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","INITIAL_STATE","constructor","initialState","board","map","row","slice","score","status","start","addRandomTile","restart","getScore","getState","getStatus","emptyCells","forEach","rowIndex","cell","colIndex","push","length","randomRow","randomCol","Math","floor","random","arraysEqual","arr1","arr2","every","val","index","transposeBoard","_","checkWin","some","includes","checkLose","col","moveLeft","moved","newRow","filter","num","i","splice","moveRight","reverse","moveDown","moveUp","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$gameStarted","$09e991522ca7e64e$var$updateGameState","gameStatus","document","querySelector","textContent","messageContainer","classList","add","remove","$09e991522ca7e64e$var$displayBoard","cells","boardContainer","querySelectorAll","cellValue","currentClass","Array","from","find","className","startsWith","addEventListener","e","key","button","target","contains","$09e991522ca7e64e$var$startGame","startButton","$09e991522ca7e64e$var$restartGame","restartButton"],"version":3,"file":"index.d7b03a0d.js.map"}